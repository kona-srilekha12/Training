#quick sort
"""
l=list(map(int,input().split(" ")))
def quick(l,start,end):
   if start<end:
       pi=qsort(l,start,end)
       quick(l,start,pi-1)
       quick(l,pi+1,end)
   return l
def qsort(l,start,end):
    pi=start
    while start<=end:
        if l[start]<=l[pi]:
            start+=1
        elif l[end]>l[pi]:
            end=end-1
        else :
            l[start],l[end]=l[end],l[start]
            #print(l)
    l[end],l[pi]=l[pi],l[end]
    #print(l)
    return end
print(quick(l,0,len(l)-1))
"""
#merge sort
#MERGE SORT using Inversion Count
"""
def mergesort(l,inversion):
    if len(l)>1:
        mid=len(l)//2
        left=l[:mid]#not including mid value
        right=l[mid:]#including mid
        li=mergesort(left,inversion)
        ri=mergesort(right,inversion)
        i=j=k=0  #i-index of left # j -right array index #index of res array
        while i<len(left) and j<len(right):
            if left[i]<=right[j]:
                l[k]=left[i]
                i+=1
                k+=1
            else:
                l[k]=right[j]
                j+=1
                k+=1
                inversion+=len(left)-i
        while i<len(left):
           l[k]=left[i]
           i=i+1
           k=k+1
        while j<len(right):
           l[k]=right[j]
           j+=1
           k+=1
        return inversion+li+ri
    return 0
l=list(map(int,input().split()))
print(mergesort(l,0))
print(l)
"""
def is_valid_parentheses(expr):
    stack = []
    opening_brackets = "({["
    closing_brackets = ")}]"

    for char in expr:
        if char in opening_brackets:
            stack.append(char)
        elif char in closing_brackets:
            # If the stack is empty or the last opening bracket
            # doesn't match the corresponding closing bracket
            if not stack or opening_brackets[closing_brackets.index(char)] != stack.pop():
                return False

    # If the stack is empty, all parentheses are matched
    return not stack

# Example usage:
expression = input()
if is_valid_parentheses(expression):
    print(f"The parentheses in '{expression}' are valid.")
else:
    print(f"The parentheses in '{expression}' are not valid.")

                


    
       
        
        
    
